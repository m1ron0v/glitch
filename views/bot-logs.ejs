<%- include('partials/header') %>

<div class="container mt-4 mb-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0"><i class="fas fa-file-alt me-2"></i><%= pageTitle %></h2>
        <a href="/" class="btn btn-outline-secondary"><i class="fas fa-arrow-left me-1"></i>До списку ботів</a>
    </div>

    <% if (locals.messages && locals.messages.error) { %> <div class="alert alert-danger" role="alert"><%= locals.messages.error %></div>
    <% } %>
    
    <div id="pinnedErrorContainer" class="alert alert-danger sticky-top shadow-sm" role="alert" style="display: none; top: 70px; z-index: 1000; margin-bottom: 1rem;">
        <h4 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Закріплена помилка!</h4>
        <p id="pinnedErrorMessage" class="mb-1"></p>
        <hr class="my-2">
        <p class="mb-0 small">Остання поява: <span id="pinnedErrorTime"></span>. Ця помилка буде відображатися, доки не буде виправлена, або бот не запуститься успішно.</p>
    </div>

    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Вміст лог-файлу: <code>logs/logs-<%= bot.botId %>.txt</code></span>
            <button class="btn btn-sm btn-light" id="refreshLogsBtn" title="Оновити логи">
                <i class="fas fa-sync-alt"></i> Оновити (<span id="countdown">10</span>с)
            </button>
        </div>
        <div class="card-body">
            <pre id="logContentOutput" style="white-space: pre-wrap; word-wrap: break-word; background-color: #1e1e1e; color: #d4d4d4; padding: 15px; border-radius: 0.25rem; max-height: 70vh; overflow-y: auto; font-size: 0.85em;"></pre>
        </div>
    </div>
</div>

<script>
    const botDbId = "<%= bot._id %>";
    const logContentOutput = document.getElementById('logContentOutput');
    const refreshLogsBtn = document.getElementById('refreshLogsBtn');
    const countdownElement = document.getElementById('countdown');
    
    const pinnedErrorContainer = document.getElementById('pinnedErrorContainer');
    const pinnedErrorMessageElem = document.getElementById('pinnedErrorMessage');
    const pinnedErrorTimeElem = document.getElementById('pinnedErrorTime');

    let countdownIntervalId; // Змінено ім'я для ясності
    let timeLeft = 10; // Час в секундах для оновлення

    async function fetchLogs() {
        if (refreshLogsBtn) {
             refreshLogsBtn.disabled = true;
             refreshLogsBtn.querySelector('i.fas').classList.add('fa-spin');
        }

        try {
            const response = await fetch(`/bots/api/${botDbId}/logs-content`);
            if (!response.ok) {
                const errorData = await response.text(); // Спробувати отримати текст помилки
                logContentOutput.textContent = `Помилка завантаження логів: ${response.status} ${response.statusText}. ${errorData}`;
                if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
                return;
            }
            const data = await response.json();
            
            if (data.pinnedError) {
                pinnedErrorMessageElem.textContent = data.pinnedError;
                if (data.lastPinnedErrorTime) {
                    try {
                         pinnedErrorTimeElem.textContent = new Date(data.lastPinnedErrorTime).toLocaleString('uk-UA', { dateStyle: 'medium', timeStyle: 'medium' });
                    } catch (e) { pinnedErrorTimeElem.textContent = data.lastPinnedErrorTime; }
                   
                } else {
                    pinnedErrorTimeElem.textContent = 'нещодавно';
                }
                pinnedErrorContainer.style.display = 'block';
            } else {
                pinnedErrorContainer.style.display = 'none';
            }

            logContentOutput.textContent = data.logs || 'Логи порожні.';
            logContentOutput.scrollTop = logContentOutput.scrollHeight;

        } catch (error) {
            console.error('Failed to fetch logs:', error);
            logContentOutput.textContent = 'Не вдалося завантажити логи. Перевірте консоль браузера або логи сервера.';
            if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
        } finally {
            if (refreshLogsBtn) {
                refreshLogsBtn.disabled = false;
                refreshLogsBtn.querySelector('i.fas').classList.remove('fa-spin');
            }
            resetCountdown();
        }
    }

    function startCountdown() {
        clearInterval(countdownIntervalId); // Очистити попередній інтервал
        timeLeft = 10;
        if(countdownElement) countdownElement.textContent = timeLeft;
        countdownIntervalId = setInterval(() => {
            timeLeft--;
            if (countdownElement) countdownElement.textContent = timeLeft > 0 ? timeLeft : 0;
            if (timeLeft <= 0) {
                fetchLogs(); // Це перезапустить таймер через finally в fetchLogs
            }
        }, 1000);
    }
    
    function resetCountdown() { // Ця функція тепер просто запускає новий відлік
        startCountdown();
    }


    if(refreshLogsBtn) {
        refreshLogsBtn.addEventListener('click', () => {
            clearInterval(countdownIntervalId); 
            fetchLogs(); 
        });
    }

    // Initial fetch and start auto-refresh
    fetchLogs(); // Перший запит, який також запустить таймер у finally
</script>

<%- include('partials/footer') %>
