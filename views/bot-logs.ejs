<%- include('partials/header') %>

<div class="container mt-4 mb-5"> <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0"><i class="fas fa-file-alt me-2"></i><%= pageTitle %></h2>
        <a href="/" class="btn btn-outline-secondary"><i class="fas fa-arrow-left me-1"></i>До списку ботів</a>
    </div>

    <% if (locals.messages && locals.messages.error) { %> <div class="alert alert-danger" role="alert"><%= locals.messages.error %></div>
    <% } %>
    
    <div id="pinnedErrorContainer" class="alert alert-danger sticky-top shadow-sm" role="alert" style="display: none; top: 70px; z-index: 1000; margin-bottom: 1rem;">
        <h4 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Закріплена помилка!</h4>
        <p id="pinnedErrorMessage" class="mb-1"></p>
        <hr class="my-2">
        <p class="mb-0 small">Остання поява: <span id="pinnedErrorTime"></span>. Ця помилка буде відображатися, доки не буде виправлена, або бот не запуститься успішно.</p>
    </div>

    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Вміст лог-файлу: <code>logs/logs-<%= bot.botId %>.txt</code></span>
            <button class="btn btn-sm btn-light" id="refreshLogsBtn" title="Оновити логи">
                <i class="fas fa-sync-alt"></i> Оновити (<span id="countdown">5</span>с) </button>
        </div>
        <div class="card-body">
            <pre id="logContentOutput" style="white-space: pre-wrap; word-wrap: break-word; background-color: #1e1e1e; color: #d4d4d4; padding: 15px; border-radius: 0.25rem; max-height: 60vh; overflow-y: auto; font-size: 0.85em;"></pre>
        </div>
    </div>

    <div class="card shadow-sm mt-4" id="botConsoleCard">
        <div class="card-header">
            <i class="fas fa-terminal me-2"></i>Консоль команд для бота: <strong><%= bot.botId %></strong>
        </div>
        <div class="card-body">
            <div id="consoleFeedback" class="mb-2" style="min-height: 20px;"></div>
            <div class="input-group">
                <input type="text" class="form-control" id="consoleInput" placeholder="Введіть команду (напр., /start, /stop, /status, /refresh)">
                <button class="btn btn-primary" type="button" id="sendConsoleCommandBtn"><i class="fas fa-paper-plane"></i> Надіслати</button>
            </div>
            <div class="form-text">Доступні команди: <code>/start</code>, <code>/stop</code>, <code>/status</code>, <code>/refresh</code>. Натисніть Enter або кнопку "Надіслати".</div>
        </div>
    </div>
</div>

<script>
    const botDbId = "<%= bot._id %>";
    const botInternalId = "<%= bot.botId %>"; 
    const logContentOutput = document.getElementById('logContentOutput');
    const refreshLogsBtn = document.getElementById('refreshLogsBtn');
    const countdownElement = document.getElementById('countdown');
    
    const pinnedErrorContainer = document.getElementById('pinnedErrorContainer');
    const pinnedErrorMessageElem = document.getElementById('pinnedErrorMessage');
    const pinnedErrorTimeElem = document.getElementById('pinnedErrorTime');

    const consoleInput = document.getElementById('consoleInput');
    const sendConsoleCommandBtn = document.getElementById('sendConsoleCommandBtn');
    const consoleFeedback = document.getElementById('consoleFeedback');

    let countdownIntervalId;
    let timeLeft = 5; // ЗМІНЕНО: Інтервал автооновлення тепер 5 секунд

    async function fetchLogs() {
        if (refreshLogsBtn) {
             refreshLogsBtn.disabled = true;
             if (refreshLogsBtn.querySelector('i.fas')) {
                refreshLogsBtn.querySelector('i.fas').classList.add('fa-spin');
             }
        }

        try {
            const response = await fetch(`/bots/api/${botDbId}/logs-content`);
            if (!response.ok) {
                const errorData = await response.text();
                logContentOutput.textContent = `Помилка завантаження логів: ${response.status} ${response.statusText}. ${errorData}`;
                if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
                return; 
            }
            const data = await response.json();
            
            if (data.pinnedError) {
                pinnedErrorMessageElem.textContent = data.pinnedError;
                if (data.lastPinnedErrorTime) {
                    try {
                         pinnedErrorTimeElem.textContent = new Date(data.lastPinnedErrorTime).toLocaleString('uk-UA', { dateStyle: 'medium', timeStyle: 'medium' });
                    } catch (e) { pinnedErrorTimeElem.textContent = data.lastPinnedErrorTime; }
                } else {
                    pinnedErrorTimeElem.textContent = 'нещодавно';
                }
                pinnedErrorContainer.style.display = 'block';
            } else {
                pinnedErrorContainer.style.display = 'none';
            }

            logContentOutput.textContent = data.logs || 'Логи порожні.';
            setTimeout(() => { 
                logContentOutput.scrollTop = logContentOutput.scrollHeight;
            }, 100);

        } catch (error) {
            console.error('Failed to fetch logs:', error);
            logContentOutput.textContent = 'Не вдалося завантажити логи. Перевірте консоль браузера або логи сервера.';
            if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
        } finally {
            if (refreshLogsBtn) {
                refreshLogsBtn.disabled = false;
                if (refreshLogsBtn.querySelector('i.fas')) { 
                    refreshLogsBtn.querySelector('i.fas').classList.remove('fa-spin');
                }
            }
            resetCountdown(); 
        }
    }

    function startCountdown() {
        clearInterval(countdownIntervalId); 
        timeLeft = 5; // ЗМІНЕНО: Інтервал автооновлення тепер 5 секунд
        if(countdownElement) countdownElement.textContent = timeLeft;
        
        countdownIntervalId = setInterval(() => {
            timeLeft--;
            if (countdownElement) countdownElement.textContent = timeLeft > 0 ? timeLeft : 0;
            if (timeLeft <= 0) {
                fetchLogs(); 
            }
        }, 1000);
    }
    
    function resetCountdown() { 
        startCountdown();
    }

    if(refreshLogsBtn) {
        refreshLogsBtn.addEventListener('click', () => {
            clearInterval(countdownIntervalId); 
            fetchLogs(); 
        });
    }

    function displayConsoleFeedback(message, isError = false) {
        if (consoleFeedback) {
            consoleFeedback.textContent = message;
            consoleFeedback.className = 'mb-2'; 
            if (isError) {
                consoleFeedback.classList.add('text-danger', 'error'); // Використовуємо власні класи .error/.success для CSS
            } else {
                consoleFeedback.classList.add('text-success', 'success');
            }
        }
    }

    async function handleConsoleCommand() {
        if (!consoleInput) return;
        const commandFull = consoleInput.value.trim();
        if (!commandFull) return;

        const [command, ...args] = commandFull.split(' ');
        consoleInput.value = ''; 
        displayConsoleFeedback(`Обробка команди: ${command}...`, false);
        if(sendConsoleCommandBtn) sendConsoleCommandBtn.disabled = true;

        try {
            let response;
            let data;
            
            switch (command.toLowerCase()) {
                case '/refresh':
                    await fetchLogs(); 
                    displayConsoleFeedback('Логи оновлено.', false);
                    break;
                case '/status':
                    response = await fetch(`/bots/process-status/${botDbId}`); // Використовуємо існуючий ендпоінт
                    if (!response.ok) throw new Error(`HTTP помилка! Статус: ${response.status}`);
                    data = await response.json();
                    let statusMessage = `Статус: ${data.status || 'N/A'}. БД: ${data.dbStatus || 'N/A'}. Повідомлення: ${data.message || 'Немає'}.`;
                    if(data.pinnedError) statusMessage += ` Закріплена помилка: ${data.pinnedError}`;
                    displayConsoleFeedback(statusMessage, data.status === 'error' || data.status === 'stale');
                    break;
                case '/start':
                    response = await fetch(`/bots/api/${botDbId}/start`, { method: 'POST' });
                    if (!response.ok) { 
                        data = await response.json().catch(() => ({ message: `HTTP помилка ${response.status}`})); 
                        throw new Error(data.message || `Помилка сервера: ${response.status}`);
                    }
                    data = await response.json();
                    displayConsoleFeedback(data.message || 'Команда /start виконана.', !data.success);
                    if(data.success) {
                        await fetchLogs(); // ЗМІНЕНО: Негайне оновлення логів
                        setTimeout(fetchLogs, 2000); // Додаткове оновлення для логів запуску
                    }
                    break;
                case '/stop':
                    response = await fetch(`/bots/api/${botDbId}/stop`, { method: 'POST' });
                     if (!response.ok) {
                        data = await response.json().catch(() => ({ message: `HTTP помилка ${response.status}`}));
                        throw new Error(data.message || `Помилка сервера: ${response.status}`);
                    }
                    data = await response.json();
                    displayConsoleFeedback(data.message || 'Команда /stop виконана.', !data.success);
                    if(data.success) {
                        await fetchLogs(); // ЗМІНЕНО: Негайне оновлення логів
                        setTimeout(fetchLogs, 1500); // Додаткове оновлення для логів зупинки
                    }
                    break;
                default:
                    displayConsoleFeedback(`Невідома команда: ${command}`, true);
            }
        } catch (error) {
            console.error('Console command error:', error);
            displayConsoleFeedback(`Помилка виконання команди: ${error.message || 'Невідома помилка'}`, true);
        } finally {
            if(sendConsoleCommandBtn) sendConsoleCommandBtn.disabled = false;
        }
    }
    
    if (sendConsoleCommandBtn) {
        sendConsoleCommandBtn.addEventListener('click', handleConsoleCommand);
    }
    if (consoleInput) {
        consoleInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault(); 
                handleConsoleCommand();
            }
        });
    }
    
    fetchLogs(); 
</script>

<%- include('partials/footer') %>
