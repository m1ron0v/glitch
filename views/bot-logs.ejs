<%- /* views/bot-logs.ejs */ %>
<%- include('partials/header') %>

<div class="container mt-4 mb-5">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0"><i class="fas fa-file-alt me-2"></i><%= pageTitle %></h2>
        <div>
            <% if (locals.navBotId) { %> 
                <a href="/bots/<%= locals.navBotId %>/manage/status" class="btn btn-outline-primary me-2"><i class="fas fa-cogs me-1"></i>До керування ботом</a>
            <% } %>
            <a href="/" class="btn btn-outline-secondary"><i class="fas fa-arrow-left me-1"></i>До списку ботів</a>
        </div>
    </div>

    <% if (locals.messages && locals.messages.error) { %> 
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <%= locals.messages.error %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    <% } %>
    
    <div id="pinnedErrorContainer" class="alert alert-danger sticky-top shadow-sm" role="alert" style="display: none; top: 70px; z-index: 1000; margin-bottom: 1rem;">
        <h4 class="alert-heading"><i class="fas fa-exclamation-triangle me-2"></i>Закріплена помилка!</h4>
        <p id="pinnedErrorMessage" class="mb-1"></p>
        <hr class="my-2">
        <p class="mb-0 small">Остання поява: <span id="pinnedErrorTime"></span>. Ця помилка буде відображатися, доки не буде виправлена, або бот не запуститься успішно.</p>
    </div>

    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <span>Вміст лог-файлу: <code>logs/logs-<%= bot.botId %>.txt</code></span>
            <button class="btn btn-sm btn-light" id="refreshLogsBtn" title="Оновити логи">
                <i class="fas fa-sync-alt"></i> Оновити (<span id="countdown">5</span>с)
            </button>
        </div>
        <div class="card-body">
            <pre id="logContentOutput" style="white-space: pre-wrap; word-wrap: break-word; background-color: var(--log-output-bg); color: var(--log-output-color); padding: 15px; border-radius: 0.375rem; max-height: 60vh; overflow-y: auto; font-size: 0.85em;"></pre>
        </div>
    </div>

    <div class="card shadow-sm mt-4" id="botConsoleCard">
        <div class="card-header">
            <i class="fas fa-terminal me-2"></i>Консоль команд для бота: <strong><%= bot.botId %></strong>
        </div>
        <div class="card-body">
            <div id="consoleFeedback" class="mb-2 p-2 rounded" style="min-height: 40px; background-color: var(--input-disabled-bg); border: 1px solid var(--input-border-color);"></div>
            <div class="input-group">
                <input type="text" class="form-control" id="consoleInput" placeholder="Введіть команду або повідомлення...">
                <button class="btn btn-primary" type="button" id="sendConsoleCommandBtn"><i class="fas fa-paper-plane"></i> Надіслати</button>
            </div>
            <div class="form-text mt-2"> {/* ОНОВЛЕНА ПІДКАЗКА */}
                Команди менеджера: <code>start</code>, <code>stop</code>, <code>status</code>, <code>refresh</code> (без слеша).<br>
                Для надсилання повідомлення/команди боту: введіть текст або команду зі слешем (напр., <code>/mycommand</code>, <code>звичайний текст</code>).
            </div>
        </div>
    </div>
</div>

<script>
    const botDbId = "<%= bot._id %>"; 
    const botInternalId = "<%= bot.botId %>"; 
    const logContentOutput = document.getElementById('logContentOutput');
    const refreshLogsBtn = document.getElementById('refreshLogsBtn');
    const countdownElement = document.getElementById('countdown');
    const pinnedErrorContainer = document.getElementById('pinnedErrorContainer');
    const pinnedErrorMessageElem = document.getElementById('pinnedErrorMessage');
    const pinnedErrorTimeElem = document.getElementById('pinnedErrorTime');

    const consoleInput = document.getElementById('consoleInput');
    const sendConsoleCommandBtn = document.getElementById('sendConsoleCommandBtn');
    const consoleFeedback = document.getElementById('consoleFeedback');

    let countdownIntervalId;
    let timeLeft = 5; 

    async function fetchLogs() {
        if (refreshLogsBtn) {
             refreshLogsBtn.disabled = true;
             if (refreshLogsBtn.querySelector('i.fas')) {
                refreshLogsBtn.querySelector('i.fas').classList.add('fa-spin');
             }
        }
        try {
            const response = await fetch(`/bots/api/${botDbId}/logs-content`);
            if (!response.ok) {
                const errorData = await response.text();
                logContentOutput.textContent = `Помилка завантаження логів: ${response.status} ${response.statusText}. ${errorData}`;
                if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
                return;
            }
            const data = await response.json();
            if (data.pinnedError) {
                pinnedErrorMessageElem.textContent = data.pinnedError;
                if (data.lastPinnedErrorTime) {
                    try {
                         pinnedErrorTimeElem.textContent = new Date(data.lastPinnedErrorTime).toLocaleString('uk-UA', { dateStyle: 'medium', timeStyle: 'medium' });
                    } catch (e) { pinnedErrorTimeElem.textContent = data.lastPinnedErrorTime; }
                } else {
                    pinnedErrorTimeElem.textContent = 'нещодавно';
                }
                pinnedErrorContainer.style.display = 'block';
            } else {
                pinnedErrorContainer.style.display = 'none';
            }
            logContentOutput.textContent = data.logs || 'Логи порожні.';
            setTimeout(() => { 
                if(logContentOutput) logContentOutput.scrollTop = logContentOutput.scrollHeight;
            }, 100);
        } catch (error) {
            console.error('Failed to fetch logs:', error);
            if (logContentOutput) logContentOutput.textContent = 'Не вдалося завантажити логи. Перевірте консоль браузера або логи сервера.';
            if (pinnedErrorContainer) pinnedErrorContainer.style.display = 'none';
        } finally {
            if (refreshLogsBtn) {
                refreshLogsBtn.disabled = false;
                if (refreshLogsBtn.querySelector('i.fas')) { 
                    refreshLogsBtn.querySelector('i.fas').classList.remove('fa-spin');
                }
            }
            resetCountdown();
        }
    }

    function startCountdown() {
        clearInterval(countdownIntervalId);
        timeLeft = 5; 
        if(countdownElement) countdownElement.textContent = timeLeft;
        countdownIntervalId = setInterval(() => {
            timeLeft--;
            if (countdownElement) countdownElement.textContent = timeLeft > 0 ? timeLeft : 0;
            if (timeLeft <= 0) {
                fetchLogs(); 
            }
        }, 1000);
    }
    
    function resetCountdown() { 
        startCountdown();
    }

    if(refreshLogsBtn) {
        refreshLogsBtn.addEventListener('click', () => {
            clearInterval(countdownIntervalId); 
            fetchLogs(); 
        });
    }

    function displayConsoleFeedback(message, isError = false) {
        if (consoleFeedback) {
            consoleFeedback.innerHTML = ''; // Очищуємо попереднє
            const p = document.createElement('p');
            p.textContent = message;
            p.className = 'mb-0'; 
            if (isError) {
                p.classList.add('text-danger');
            } else {
                p.classList.add('text-success');
            }
            consoleFeedback.appendChild(p);
        }
    }

    async function handleConsoleCommand() { // ОНОВЛЕНА ФУНКЦІЯ
        if (!consoleInput) return;
        const fullInput = consoleInput.value.trim();
        if (!fullInput) return;

        consoleInput.value = ''; 
        if(sendConsoleCommandBtn) sendConsoleCommandBtn.disabled = true;

        try {
            let response;
            let data;
            
            const managerCommandKeywords = ['start', 'stop', 'status', 'refresh'];
            const firstWord = fullInput.split(' ')[0].toLowerCase();

            if (managerCommandKeywords.includes(firstWord) && !fullInput.startsWith('/')) {
                const managerCommand = firstWord;
                displayConsoleFeedback(`Обробка команди менеджера: ${managerCommand}...`, false);

                switch (managerCommand) {
                    case 'refresh':
                        await fetchLogs();
                        displayConsoleFeedback('Логи оновлено.', false);
                        break;
                    case 'status':
                        response = await fetch(`/bots/process-status/${botDbId}`);
                        if (!response.ok) throw new Error(`HTTP помилка! Статус: ${response.status}`);
                        data = await response.json();
                        let statusMessage = `Статус: ${data.status || 'N/A'}. БД: ${data.dbStatus || 'N/A'}. Повідомлення: ${data.message || 'Немає'}.`;
                        if(data.pinnedError) statusMessage += ` Закріплена помилка: ${data.pinnedError}`;
                        displayConsoleFeedback(statusMessage, data.status === 'error' || data.status === 'stale');
                        break;
                    case 'start':
                        response = await fetch(`/bots/api/${botDbId}/start`, { method: 'POST' });
                        if (!response.ok) { 
                            data = await response.json().catch(() => ({ message: `HTTP помилка ${response.status}`}));
                            throw new Error(data.message || `Помилка сервера: ${response.status}`);
                        }
                        data = await response.json();
                        displayConsoleFeedback(data.message || 'Команда "start" виконана.', !data.success);
                        if(data.success) {
                            await fetchLogs(); 
                            setTimeout(fetchLogs, 2000);
                        }
                        break;
                    case 'stop':
                        response = await fetch(`/bots/api/${botDbId}/stop`, { method: 'POST' });
                        if (!response.ok) {
                            data = await response.json().catch(() => ({ message: `HTTP помилка ${response.status}`}));
                            throw new Error(data.message || `Помилка сервера: ${response.status}`);
                        }
                        data = await response.json();
                        displayConsoleFeedback(data.message || 'Команда "stop" виконана.', !data.success);
                        if(data.success) {
                            await fetchLogs();
                            setTimeout(fetchLogs, 1500);
                        }
                        break;
                }
            } else {
                displayConsoleFeedback(`Надсилання повідомлення боту: "${fullInput.substring(0, 50)}"...`, false);
                response = await fetch(`/bots/api/${botDbId}/send_message_to_bot`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ messageText: fullInput }) 
                });
                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: `HTTP помилка ${response.status}` }));
                    throw new Error(errorData.message || `Помилка сервера при надсиланні повідомлення: ${response.status}`);
                }
                data = await response.json();
                if (data.success) {
                    displayConsoleFeedback(data.message || 'Повідомлення надіслано. Дивіться логи для відповіді/реакції бота.', false);
                    setTimeout(fetchLogs, 700); 
                } else {
                    displayConsoleFeedback(`Помилка надсилання: ${data.message || 'Невідома помилка відправки'}`, true);
                }
            }
        } catch (error) {
            console.error('Console command error:', error);
            displayConsoleFeedback(`Помилка виконання: ${error.message || 'Невідома помилка'}`, true);
        } finally {
            if(sendConsoleCommandBtn) sendConsoleCommandBtn.disabled = false;
        }
    }
    
    if (sendConsoleCommandBtn) {
        sendConsoleCommandBtn.addEventListener('click', handleConsoleCommand);
    }
    if (consoleInput) {
        consoleInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault(); 
                handleConsoleCommand();
            }
        });
    }
    
    fetchLogs(); 
</script>

<%- include('partials/footer') %>
